#!/bin/sh

############################################################################
#
#  Makefile to compile and link a C++ application to 
#  Cantera.
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROG_NAME = runDiamond

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = runDiamond.o

# additional flags to be passed to the linker. If your program
# requires other external libraries, put them here
LINK_OPTIONS = 

#############################################################################

# Fortran libraries
FORT_LIBS = @FLIBS@

# the C++ compiler
CXX = @CXX@

# C++ compile flags
CXX_FLAGS = @CXXFLAGS@

# external libraries
EXT_LIBS = @LOCAL_LIBS@ -lctcxx

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# the directory where the Cantera libraries are located
CANTERA_LIBDIR=@buildlib@

# required Cantera libraries
CANTERA_LIBS =  

# the directory where Cantera include files may be found.
CANTERA_INCDIR=@ctroot@/build/include/cantera

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = -L$(CANTERA_LIBDIR) @CXXFLAGS@

# How to compile C++ source files to object files
.@CXX_EXT@.@OBJ_EXT@: Interface.h
	$(CXX) -c $< -I$(CANTERA_INCDIR) $(CXX_FLAGS)

# How to compile the dependency file
.cpp.d:
	g++ -MM -I$(CANTERA_INCDIR) $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(OBJS:.o=.d)

# Program Name
PROGRAM = $(PROG_NAME)$(EXE_EXT)

# all rule makes a single program
all: $(PROGRAM)

# Rule to make the program
$(PROGRAM): $(OBJS) $(CANTERA_LIBDIR)/libcantera.a 
	$(CXX) -o $(PROGRAM) $(OBJS) $(LCXX_FLAGS) $(CANTERA_LIBS) \
                   $(LINK_OPTIONS) $(EXT_LIBS) @LIBS@ $(FORT_LIBS) \
                  $(LCXX_END_LIBS)

# depends target
depends: .depends
	$(RM) *.d .depends
	@MAKE@ .depends

.depends: $(DEPENDS)
	cat *.d > .depends

# test target -> make the program and run the test
test:
	@MAKE@ $(PROGRAM)
	./runtest

# clean target -> clean up
clean:
	$(RM) $(OBJS) $(PROGRAM) $(DEPENDS) .depends
	../../bin/rm_cvsignore














